AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a custom VPC, EC2 instance with a security group, and SSM role in the specified region.

Parameters:
  InstanceType:
    Description: EC2 instance type.
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.medium
      - t3.micro
      - m1.small
      - m1.large
      - m3.medium
      - m3.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m5.large

  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
    Default: Myprivate-key-pair  # The specified key pair name

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: "^(\\d{1,3}\\.){3}\\d{1,3}/\\d{1,2}$"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  DepartmentName:
    Description: Name of the department for tagging.
    Type: String

  AreaManager:
    Description: Name of the area manager for the department.
    Type: String

  ImageId: 
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # Create a custom VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyCustomVPC

  # Create a public subnet in the VPC
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.168.1.0/24
      AvailabilityZone: !Select [0, !GetAZs !Ref "AWS::Region"]  # Dynamic region selection
      MapPublicIpOnLaunch: true
      
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  # Create an Internet Gateway for the VPC
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the Internet Gateway to the VPC
  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Create a Route Table for the public subnet
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: MyPublicRouteTable

  # Create a route to the Internet
  MyPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate the Route Table with the Public Subnet
  MyRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  # Create the Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 + SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: !Ref SSHLocation
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22

  # Create the EC2 Instance
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref MyPublicSubnet
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup  # Properly reference the security group
      UserData: 
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo '<html><body><h1 style="color: blue;">Welcome to our first user data launch through 5 Stages CI/CD code pipeline in ${AWS::Region}</h1></body></html>' > /var/www/html/index.html

Outputs:
  InstanceId:
    Value: 
      Fn::GetAtt: 
        - WebServer
        - PublicIp
    Description: Instance ID of the newly created EC2 instance

  PrivateIp:
    Description: This returns the private IP of the EC2 instance
    Value: !GetAtt WebServer.PrivateIp

  PublicDnsName:
    Description: This returns the public DNS name of the EC2 instance
    Value: !GetAtt WebServer.PublicDnsName

  Departmentsub: 
    Description: This sub is a variable within a given string
    Value: !Sub "This EC2 instance belongs to the ${DepartmentName} Department"

  AreaManagersub: 
    Description: This sub is a variable within a given string
    Value: !Sub "The Area Manager of the ${DepartmentName} Department is ${AreaManager}"